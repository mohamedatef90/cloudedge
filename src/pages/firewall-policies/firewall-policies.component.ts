import { ChangeDetectionStrategy, Component, computed, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IconComponent } from '../../components/icon/icon.component';
import { PaginationComponent } from '../ids-ips-malware-prevention/components/pagination/pagination.component';
import { AttributesModalComponent } from './components/attributes-modal/attributes-modal.component';

interface Application {
  id: string;
  name: string;
  isSystemDefined: boolean;
  attributes: string;
  description: string;
  tags: number;
  whereUsed: number;
  status: 'Success';
}

const generateMockApplications = (count: number): Application[] => {
    const baseApplications: Omit<Application, 'id'>[] = [
      { name: '360ANTIV', isSystemDefined: true, attributes: '360ANTIV', description: '360 Safeguard is a program developed by Qihoo 360', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'ACTIVDIR', isSystemDefined: true, attributes: 'ACTIVDIR', description: 'Microsoft Active Directory', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AMQP', isSystemDefined: true, attributes: 'AMQP', description: 'Advanced Message Queueing Protocol (AMQP) is an application layer protocol which supports business message communication between applications or organizations', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVAST', isSystemDefined: true, attributes: 'AVAST', description: 'Traffic generated by browsing Avast.com official website of Avast! Antivirus downloads.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVG', isSystemDefined: true, attributes: 'AVG', description: 'AVG Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVIRA', isSystemDefined: true, attributes: 'AVIRA', description: 'Avira Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'BDEFNDER', isSystemDefined: true, attributes: 'BDEFNDER', description: 'BitDefender Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'BLAST', isSystemDefined: true, attributes: 'BLAST', description: 'VMware Blast Protocol', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'CA_CERT', isSystemDefined: true, attributes: 'CA_CERT', description: 'Certification authority (CA) issues digital certificates which certifies the ownership of a public key for message encryption.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'CITRIX', isSystemDefined: true, attributes: 'CITRIX', description: 'Citrix ICA Protocol', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'DNS', isSystemDefined: true, attributes: 'DNS', description: 'Domain Name System', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'DROPBOX', isSystemDefined: true, attributes: 'DROPBOX', description: 'Dropbox File Sharing', tags: 0, whereUsed: 0, status: 'Success' },
    ];
    
    const allApplications: Application[] = [];
    for (let i = 0; i < count; i++) {
        const base = baseApplications[i % baseApplications.length];
        allApplications.push({
            ...base,
            id: `app-${i + 1}`,
            name: `${base.name}${i >= baseApplications.length ? `_${Math.floor(i / baseApplications.length)}` : ''}`,
        });
    }
    return allApplications;
};

const mockApplications: Application[] = generateMockApplications(70);

@Component({
  selector: 'app-firewall-policies',
  templateUrl: './firewall-policies.component.html',
  styleUrls: ['./firewall-policies.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [CommonModule, FormsModule, IconComponent, PaginationComponent, AttributesModalComponent]
})
export class FirewallPoliciesComponent {
  applications = signal<Application[]>(mockApplications);
  filterTerm = signal('');
  currentPage = signal(1);
  rowsPerPage = signal(50);
  isRefreshing = signal(false);

  isAttributesModalOpen = signal(false);
  selectedApplication = signal<Application | null>(null);

  filteredApplications = computed(() => {
    const term = this.filterTerm().toLowerCase();
    if (!term) return this.applications();
    return this.applications().filter(p => 
      p.name.toLowerCase().includes(term) ||
      p.description.toLowerCase().includes(term)
    );
  });
  
  paginatedApplications = computed(() => {
    const startIndex = (this.currentPage() - 1) * this.rowsPerPage();
    return this.filteredApplications().slice(startIndex, startIndex + this.rowsPerPage());
  });

  handleRefresh(): void {
      this.isRefreshing.set(true);
      setTimeout(() => this.isRefreshing.set(false), 1000);
  };

  openAttributesModal(application: Application): void {
    this.selectedApplication.set(application);
    this.isAttributesModalOpen.set(true);
  }

  closeAttributesModal(): void {
    this.isAttributesModalOpen.set(false);
    this.selectedApplication.set(null);
  }
}
