
import { ChangeDetectionStrategy, Component, ElementRef, signal, viewChild } from '@angular/core';
import { CommonModule } from '@angular/common';
import { IconComponent } from '../../components/icon/icon.component';
import { ToggleSwitchComponent } from '../distributed-firewall/components/toggle-switch/toggle-switch.component';
import { RulesViewComponent } from './components/rules-view/rules-view.component';
import { ProfilesViewComponent } from './components/profiles-view/profiles-view.component';

@Component({
  selector: 'app-ids-ips-malware-prevention',
  templateUrl: './ids-ips-malware-prevention.component.html',
  styleUrls: ['./ids-ips-malware-prevention.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [CommonModule, IconComponent, ToggleSwitchComponent, RulesViewComponent, ProfilesViewComponent],
  host: {
    '(document:mousedown)': 'onGlobalClick($event)',
  },
})
export class IdsIpsMalwarePreventionComponent {
  isServiceEnabled = signal(true);
  activeTab = signal<'rules' | 'profiles'>('rules');
  isActionsMenuOpen = signal(false);
  actionsMenuRef = viewChild<ElementRef>('actionsMenuRef');
  actionsButtonRef = viewChild<ElementRef>('actionsButtonRef');

  tabs = [
    { id: 'rules', name: 'Distributed Rules' },
    { id: 'profiles', name: 'Profiles' }
  ];

  onGlobalClick(event: MouseEvent): void {
      if (
          this.isActionsMenuOpen() &&
          this.actionsMenuRef() && !this.actionsMenuRef()!.nativeElement.contains(event.target as Node) &&
          this.actionsButtonRef() && !this.actionsButtonRef()!.nativeElement.contains(event.target as Node)
      ) {
          this.isActionsMenuOpen.set(false);
      }
  }
}
