import { ChangeDetectionStrategy, Component, computed, effect, input, output, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IconComponent } from '../../../../components/icon/icon.component';
import { IdsIpsProfile } from '../../types';
import { ToggleSwitchComponent } from '../../../distributed-firewall/components/toggle-switch/toggle-switch.component';
import { FeaturePlaceholderModalComponent } from '../feature-placeholder-modal/feature-placeholder-modal.component';

export interface ProfileFormData {
  name: string;
  description: string;
  tags: { id: number; tag: string; scope: string }[];
  severities: {
    critical: boolean;
    high: boolean;
    medium: boolean;
    low: boolean;
    suspicious: boolean;
  };
  packetCapture: boolean;
}

@Component({
  selector: 'app-add-edit-profile-modal',
  standalone: true,
  imports: [CommonModule, FormsModule, IconComponent, ToggleSwitchComponent, FeaturePlaceholderModalComponent],
  templateUrl: './add-edit-profile-modal.component.html',
  styleUrls: ['./add-edit-profile-modal.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class AddEditProfileModalComponent {
  isOpen = input.required<boolean>();
  profileToEdit = input<IdsIpsProfile | null>();

  close = output<void>();
  save = output<ProfileFormData>();

  profileData = signal<ProfileFormData>(this.getInitialState());
  isEditMode = computed(() => !!this.profileToEdit());

  // Placeholder Modal State
  isPlaceholderModalOpen = signal(false);
  placeholderModalTitle = signal('');

  constructor() {
    effect(() => {
      if (this.isOpen()) {
        const profile = this.profileToEdit();
        if (profile) {
          // In a real app, you would map the profile details to the form state here
          this.profileData.set(this.getInitialState());
        } else {
          this.profileData.set(this.getInitialState());
        }
      }
    });
  }
  
  private getInitialState(): ProfileFormData {
    return {
      name: '',
      description: '',
      tags: [{ id: Date.now(), tag: '', scope: '' }],
      severities: {
        critical: true,
        high: true,
        medium: true,
        low: true,
        suspicious: true,
      },
      packetCapture: false,
    };
  }

  addTag(): void {
    this.profileData.update(form => {
      if (form.tags.length < 30) {
        return { ...form, tags: [...form.tags, { id: Date.now(), tag: '', scope: '' }] };
      }
      return form;
    });
  }

  removeTag(id: number): void {
    this.profileData.update(form => ({
      ...form,
      tags: form.tags.filter(tag => tag.id !== id)
    }));
  }
  
  onSave(): void {
    const data = this.profileData();
    if(data.name.trim()) {
      this.save.emit(data);
    }
  }

  onDialogClick(event: MouseEvent): void {
    event.stopPropagation();
  }

  openPlaceholderModal(title: string): void {
    this.placeholderModalTitle.set(title);
    this.isPlaceholderModalOpen.set(true);
  }
}
