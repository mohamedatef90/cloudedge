import { ChangeDetectionStrategy, Component, computed, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IconComponent } from '../../../../components/icon/icon.component';
import { IdsIpsProfile } from '../../types';
import { MOCK_IDS_IPS_PROFILES_DATA } from '../../mock-data';
import { PaginationComponent } from '../pagination/pagination.component';
import { AddEditProfileModalComponent, ProfileFormData } from '../add-edit-profile-modal/add-edit-profile-modal.component';

@Component({
  selector: 'app-profiles-view',
  templateUrl: './profiles-view.component.html',
  styleUrls: ['./profiles-view.component.css'],
  changeDetection: ChangeDetectionStrategy.OnPush,
  imports: [CommonModule, FormsModule, IconComponent, PaginationComponent, AddEditProfileModalComponent],
})
export class ProfilesViewComponent {
  profiles = signal<IdsIpsProfile[]>(MOCK_IDS_IPS_PROFILES_DATA);
  filterTerm = signal('');
  currentPage = signal(1);
  rowsPerPage = signal(10);
  isRefreshing = signal(false);
  selectedProfiles = signal<string[]>([]);

  // Modal state
  isAddEditModalOpen = signal(false);
  profileToEdit = signal<IdsIpsProfile | null>(null);

  filteredProfiles = computed(() => {
    const term = this.filterTerm().toLowerCase();
    if (!term) return this.profiles();
    return this.profiles().filter(p =>
      p.name.toLowerCase().includes(term) ||
      p.description.toLowerCase().includes(term)
    );
  });

  paginatedProfiles = computed(() => {
    const startIndex = (this.currentPage() - 1) * this.rowsPerPage();
    return this.filteredProfiles().slice(startIndex, startIndex + this.rowsPerPage());
  });

  areAllOnPageSelected = computed(() => {
    const paginated = this.paginatedProfiles();
    if (paginated.length === 0) return false;
    return paginated.every(p => this.selectedProfiles().includes(p.id));
  });

  openAddModal(): void {
    this.profileToEdit.set(null);
    this.isAddEditModalOpen.set(true);
  }

  closeModal(): void {
    this.isAddEditModalOpen.set(false);
    this.profileToEdit.set(null);
  }

  handleAddProfile(formData: ProfileFormData): void {
    const includedSeverities = Object.entries(formData.severities)
      .filter(([_, value]) => value)
      .map(([key]) => key.charAt(0).toUpperCase() + key.slice(1));
      
    const severityData = [
      { name: 'Critical', count: 6173 },
      { name: 'High', count: 5430 },
      { name: 'Medium', count: 48 },
      { name: 'Low', count: 926 },
      { name: 'Suspicious', count: 1315 },
    ];
    
    const includedSeverityDetails = severityData.filter(s => includedSeverities.includes(s.name));
    const includedSignaturesCount = includedSeverityDetails.reduce((acc, sev) => acc + sev.count, 0);

    const newProfile: IdsIpsProfile = {
      id: `profile-${Date.now()}`,
      name: formData.name,
      description: formData.description,
      isSystemDefined: false,
      tags: formData.tags.filter(t => t.tag.trim()).length,
      whereUsed: 0,
      status: 'Success',
      isExpanded: false,
      details: {
        idsSignatures: {
          included: includedSignaturesCount,
          total: 13892,
          severities: includedSeverityDetails,
        },
        additionalOptions: {
          attackTypes: 0,
          attackTargets: 0,
          cvss: 0,
          productsAffected: 0,
          packetCapture: formData.packetCapture,
        },
        customSignatures: 0,
      }
    };

    this.profiles.update(profiles => [newProfile, ...profiles]);
    this.closeModal();
  }

  handleRefresh(): void {
    this.isRefreshing.set(true);
    setTimeout(() => this.isRefreshing.set(false), 1000);
  }

  toggleProfile(profileId: string): void {
    this.profiles.update(prev =>
      prev.map(p => p.id === profileId ? { ...p, isExpanded: !p.isExpanded } : p)
    );
  }

  toggleExpandAll(): void {
    const areSomeCollapsed = this.profiles().some(p => !p.isExpanded);
    this.profiles.update(prev => prev.map(p => ({ ...p, isExpanded: areSomeCollapsed })));
  }

  handleSelectOne(id: string, checked: boolean): void {
    this.selectedProfiles.update(prev => checked ? [...prev, id] : prev.filter(pId => pId !== id));
  }

  handleSelectAll(checked: boolean): void {
    this.selectedProfiles.update(prev => {
      const pageIds = this.paginatedProfiles().map(p => p.id);
      if (checked) {
        return [...new Set([...prev, ...pageIds])];
      } else {
        return prev.filter(pId => !pageIds.includes(pId));
      }
    });
  }
}
